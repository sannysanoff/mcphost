package mcp

import (
	"encoding/json"
	"fmt"
	"github.com/sannysanoff/mcphost/pkg/history"
	"net/http"
	"os"
	"path/filepath"
	"reflect"
	"strings"
	"time"

	"github.com/charmbracelet/log"
	"github.com/traefik/yaegi/interp"
	"github.com/traefik/yaegi/stdlib"
	// Import the system package. After `go generate` runs, this package will contain
	// the 'Symbols' variable generated by yaegi-extract.
	systemsymbols "github.com/sannysanoff/mcphost"
)

// Agent represents a loaded agent with its interpreter and methods
type Agent interface {
	// GetSystemPrompt returns the agent's default system prompt
	GetSystemPrompt() string

	// NormalizeHistory processes and normalizes message history
	NormalizeHistory(messages []history.HistoryMessage) []history.HistoryMessage

	// Filename returns the source file name of this agent
	Filename() string
}

type yaegiAgent struct {
	filename     string
	fullPath     string
	interpreter  *interp.Interpreter
	lastCheck    int64
	lastModTime  time.Time
	cachedPrompt string
}

func (a *yaegiAgent) checkAndReload() error {
	now := time.Now().Unix()
	if now-a.lastCheck < 1 {
		return nil
	}

	info, err := os.Stat(a.fullPath)
	if err != nil {
		return fmt.Errorf("failed to stat agent file: %w", err)
	}

	if info.ModTime().After(a.lastModTime) {
		// File changed - re-evaluate
		content, err := os.ReadFile(a.fullPath)
		if err != nil {
			return fmt.Errorf("failed to read agent file: %w", err)
		}

		_, err = a.interpreter.Eval(string(content))
		if err != nil {
			return fmt.Errorf("failed to evaluate agent code: %w", err)
		}

		a.lastModTime = info.ModTime()
		a.cachedPrompt = "" // Invalidate cache
	}

	a.lastCheck = now
	return nil
}

func (a *yaegiAgent) GetSystemPrompt() string {
	if err := a.checkAndReload(); err != nil {
		log.Error("Failed to check/reload agent", "agent", a.filename, "error", err)
		return ""
	}

	if a.cachedPrompt != "" {
		return a.cachedPrompt
	}

	baseName := strings.Title(strings.TrimSuffix(filepath.Base(a.filename), ".go"))
	promptFuncName := makePascalCase(baseName) + "GetPrompt"

	evalStr := fmt.Sprintf("agents.%s()", promptFuncName)
	val, err := a.interpreter.Eval(evalStr)
	if err != nil {
		log.Error("Failed to call prompt function", "agent", a.filename, "func", promptFuncName, "error", err)
		return ""
	}

	if val.Kind() == reflect.String {
		a.cachedPrompt = val.String()
		return a.cachedPrompt
	}
	return ""
}

func (a *yaegiAgent) NormalizeHistory(messages []history.HistoryMessage) []history.HistoryMessage {
	if err := a.checkAndReload(); err != nil {
		log.Error("Failed to check/reload agent", "agent", a.filename, "error", err)
		return messages
	}

	baseName := strings.Title(strings.TrimSuffix(filepath.Base(a.filename), ".go"))
	normalizeFuncName := makePascalCase(baseName) + "NormalizeHistory"

	evalStr := fmt.Sprintf("agents.%s(%#v)", normalizeFuncName, messages)
	val, err := a.interpreter.Eval(evalStr)
	if err != nil {
		log.Error("Failed to call normalize function", "agent", a.filename, "func", normalizeFuncName, "error", err)
		return messages
	}

	if val.IsValid() && val.CanInterface() {
		if result, ok := val.Interface().([]history.HistoryMessage); ok {
			return result
		}
	}
	return messages
}

func (a *yaegiAgent) Filename() string {
	return a.filename
}

const agentsDir = "./agents" // Assuming agents are in a directory named 'agents' relative to the running binary.

// loadAgentFromFile reads an agent file and returns an initialized Agent instance
func loadAgentFromFile(agentFilePath string) (Agent, error) {
	i := interp.New(interp.Options{})
	i.Use(stdlib.Symbols)
	i.Use(systemsymbols.Symbols)

	agentFileContent, err := os.ReadFile(agentFilePath)
	if err != nil {
		return nil, fmt.Errorf("failed to read agent file %s: %w", agentFilePath, err)
	}

	// Evaluate the agent's Go code
	_, err = i.Eval(string(agentFileContent))
	if err != nil {
		return nil, fmt.Errorf("failed to evaluate agent code: %w", err)
	}

	return &yaegiAgent{
		filename:    filepath.Base(agentFilePath),
		fullPath:    agentFilePath,
		interpreter: i,
		lastCheck:   0,
	}, nil
}

func makePascalCase(name string) string {
	parts := strings.Split(name, "_")
	for i := range parts {
		if len(parts[i]) > 0 {
			parts[i] = strings.ToUpper(parts[i][:1]) + parts[i][1:]
		}
	}
	return strings.Join(parts, "")
}

// HandleListAgents discovers agents in the 'agents' directory and returns their default prompts.
func HandleListAgents(w http.ResponseWriter, r *http.Request) {
	if r.Method != http.MethodGet {
		http.Error(w, "Only GET method is allowed", http.StatusMethodNotAllowed)
		return
	}

	files, err := os.ReadDir(agentsDir)
	if err != nil {
		log.Error("Failed to read agents directory", "path", agentsDir, "error", err)
		http.Error(w, "Failed to read agents directory: "+err.Error(), http.StatusInternalServerError)
		return
	}

	var agents []Agent
	for _, file := range files {
		if file.IsDir() || !strings.HasSuffix(file.Name(), ".go") || file.Name() == "agents.go" {
			continue
		}

		agentFilePath := filepath.Join(agentsDir, file.Name())
		agent, err := loadAgentFromFile(agentFilePath)
		if err != nil {
			log.Warn("Failed to load agent", "file", agentFilePath, "error", err)
			continue
		}
		agents = append(agents, agent)
	}

	type agentInfo struct {
		Name          string `json:"name"`
		DefaultPrompt string `json:"default_prompt"`
	}

	var response []agentInfo
	for _, agent := range agents {
		response = append(response, agentInfo{
			Name:          strings.TrimSuffix(agent.Filename(), ".go"),
			DefaultPrompt: agent.GetSystemPrompt(),
		})
	}

	w.Header().Set("Content-Type", "application/json")
	if err := json.NewEncoder(w).Encode(response); err != nil {
		log.Error("/agents: Failed to encode agents information to JSON", "error", err)
		http.Error(w, "Failed to encode response: "+err.Error(), http.StatusInternalServerError)
	}
}

// GetDefaultAgent loads and returns the default agent implementation
func GetDefaultAgent() (Agent, error) {
	defaultAgentFileName := "default.go"
	defaultAgentFilePath := filepath.Join(agentsDir, defaultAgentFileName)

	if _, err := os.Stat(defaultAgentFilePath); os.IsNotExist(err) {
		return nil, fmt.Errorf("default agent file '%s' not found: %w", defaultAgentFilePath, err)
	}

	return loadAgentFromFile(defaultAgentFilePath)
}
